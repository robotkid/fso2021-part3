{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","SearchFilter","searchTerm","callback","value","onChange","PersonForm","newPerson","onNameChange","onNumberChange","onFormSubmit","onSubmit","name","number","type","PersonList","persons","deleteHandler","map","person","onClick","e","Notification","message","className","App","useState","setPersons","setNewPerson","setSearchTerm","errorMessage","setErrorMessage","successMessage","setSuccessMessage","peopleToShow","filter","p","toLowerCase","includes","useEffect","personService","initialPersons","event","target","preventDefault","some","existingIndex","findIndex","window","confirm","updatedPerson","newPersons","setTimeout","catch","error","updatePerson","returnedPerson","concat","index","indexOf","splice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1fb06573.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n\n  const deleteItem = (id) => {\n      return axios.delete(`${baseUrl}/${id}`)\n  }\n  \n  export default { \n    getAll: getAll, \n    create: create, \n    update: update,\n    deleteItem: deleteItem\n  }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst SearchFilter = ({ searchTerm, callback }) => (\n  <div>\n    filter shown with <input\n      value={searchTerm}\n      onChange={callback}\n    />\n  </div>\n)\n\nconst PersonForm = ({ newPerson, onNameChange, onNumberChange, onFormSubmit }) => {\n  return (\n    <form onSubmit={onFormSubmit}>\n      <div>\n        name: <input\n          value={newPerson.name}\n          onChange={onNameChange}\n        />\n      </div>\n      <div>\n        number: <input\n          value={newPerson.number}\n          onChange={onNumberChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst PersonList = ({ persons, deleteHandler }) => (\n  persons.map(person =>\n    <p key={person.name}>\n      {person.name} {person.number}\n      <button onClick={(e) => deleteHandler(person)}>Delete</button>\n    </p>)\n)\n\nconst Notification = ({ message, className }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={className}>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    {\n      name: 'Arto Hellas',\n      number: '040-1234567'\n    }\n  ])\n\n  const [newPerson, setNewPerson] = useState({ name: '', number: '' })\n  const [searchTerm, setSearchTerm] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n\n  const handleNameChange = (event) => {\n    setNewPerson({ ...newPerson, name: event.target.value })\n  }\n\n  const handleNumberChange = (event) => {\n    setNewPerson({ ...newPerson, number: event.target.value })\n  }\n\n  const handleSearchChange = (event => {\n    setSearchTerm(event.target.value)\n  })\n\n  const updatePerson = () => {\n    const existingIndex = persons.findIndex(p => p.name === newPerson.name)\n    const person = persons[existingIndex]\n    if (window.confirm(`Replace number for ${person.name}?`)) {\n      personService\n        .update(person.id, newPerson)\n        .then(updatedPerson => {\n          const newPersons = [...persons]\n          newPersons[existingIndex] = updatedPerson\n          setPersons(newPersons)\n          setNewPerson({ name: '', number: '' })\n          setSuccessMessage(`Number changed for ${updatedPerson.name}`)\n          window.setTimeout(setSuccessMessage, 3000, null)\n        })\n        .catch(error => {\n          setErrorMessage(`${newPerson.name} was already deleted from the server`)\n          setPersons(persons.filter(p => p.name !== newPerson.name))\n          setNewPerson({ name: '', number: '' })\n          window.setTimeout(setErrorMessage, 3000, null)\n        })\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (persons.some(p => p.name === newPerson.name)) {\n      updatePerson()\n    }\n    else {\n      personService\n        .create(newPerson)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewPerson({ name: '', number: '' })\n          setSuccessMessage(`${returnedPerson.name} successfully added`)\n          window.setTimeout(setSuccessMessage, 3000, null)\n        })\n    }\n  }\n\n  const peopleToShow = persons.filter(p =>\n    p.name.toLowerCase().includes(searchTerm.toLowerCase())\n  )\n\n  const deletePerson = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .deleteItem(person.id)\n        .then(() => {\n          const newPersons = [...persons]\n          const index = newPersons.indexOf(person)\n          newPersons.splice(index, 1)\n          setPersons(newPersons)\n        })\n    }\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      {successMessage !== null &&\n        <Notification message={successMessage} className=\"success\" />\n      }\n      {errorMessage !== null &&\n        <Notification message={errorMessage} className=\"error\" />\n      }\n      <SearchFilter\n        searchTerm={searchTerm}\n        callback={handleSearchChange}\n      />\n      <PersonForm\n        newPerson={newPerson}\n        onNameChange={handleNameChange}\n        onNumberChange={handleNumberChange}\n        onFormSubmit={addPerson}\n      />\n      <h2>Numbers</h2>\n      <PersonList persons={peopleToShow} deleteHandler={deletePerson} />\n    </div >\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}